fraze {
  Main [Fraze+] = ‛«Fraze»’
  Fraze_deffraze [_f name Item _in Item2 ScopedBlock] = ‛\n(define («name»«Item»«Item2»)«ScopedBlock»\n(MR))’

  Fraze_ifitwithelse [_ ThenScopedBlock _else ElseScopedBlock] = ‛\n(if (var? (M))«ThenScopedBlock»«ElseScopedBlock»)’

  Fraze_ifnoelse [_if Item _ ThenScopedBlock] = ‛\n(cond ((var?«Item»)«ThenScopedBlock»))’
  
  Fraze_get [_ Item] = ‛\n(M+ (value (MR) «Item»))’

  Fraze_ok [_] = ‛ '()’

  Fraze_recur [_ Item] = ‛\n(M+ (resolve (MR)«Item»))’

  Fraze_compoundnotif [_if Item _ ScopedBlock] = ‛\n(cond ((not (pair? «Item»))«ScopedBlock»))’

  Fraze_compoundif [_if Item _ ScopedBlock] = ‛
    (cond ((and (pair?«Item») (not (var?«Item»)))«ScopedBlock»))’

  Fraze_save [_save Item] = ‛\n(M+«Item»)’
  Fraze_divide_and_conquer [_ Item] = ‛
      (let ((part1 (car (M)))
	     (part2 (cdr (M))))
	(MR)
	(M+ (cons 
              (resolve part1 «Item»)
	      (resolve part2 «Item»))))’


  Hole [lb name rb] = ‛«name»’


  It [x] = ‛ (M)’
  Item [x] = ‛«x»’
  ScopedBlock [lb Fraze+ rb] = ‛«Fraze»’

  name [x] = ‛ «x»’
  id [firstLetter followingLetter* ws?] = ‛«firstLetter»«followingLetter»«ws»’
  firstLetter [c] = ‛«c»’
  followingLetter [c] = ‛«c»’
  math_symbol [c] = ‛«c»’

  tag [lq name rq] = ‛«lq»«name»«rq»’
  
  reserved_unicode_character [c] = ‛«c»’
  EQ_op [c] = ‛«c»’
  DEF_op [c] = ‛«c»’

  unicode_superscript [c] = ‛«c»’
  unicode_subscript [c] = ‛«c»’

  constant_false [_ ws] = ‛ #f’
  constant_true [_ ws] = ‛ #t’
  constant_nothing [_ ws] = ‛ '()’

  keyword [w] = ‛«w»’

  reserved_keyword_because [_ ws] = ‛’
  reserved_keyword_it [_ ws] = ‛ *it-stack* ’

  comment [_because c* _] = ‛ #|«c»|#’
  nl [c] = ‛«c»’
}

